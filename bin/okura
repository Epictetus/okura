#!/bin/env ruby
# -*- filetype:ruby -*-

require 'rubygems'

commands={
  :console => lambda {|args|
	require 'okura/console'
	raise IllegalOption.new('Usage: console dict_dir') unless args.length==1
	dict_dir=args[0]
	Okura::Console.new.run_console dict_dir
  },
  :compile => lambda {|args|
	require 'okura/serializer'
    require 'optparse'
    format_info=Okura::Serializer::FormatInfo.new
    opt=OptionParser.new
    dry=false
    opt.on('--word_dic=TYPE'){|t| format_info.word_dic=t.to_sym}
    opt.on('--dry'){|d|dry=d}
    opt.on('--encoding=ENCODING'){|encoding| format_info.encoding=encoding}
    opt.parse! args
	raise IllegalOption.new('Usage: compile dict_dir dest_dir') unless args.length==2
    dict_dir=args[0]
    bin_dir=args[1]
    puts <<-EOS
Settings
- File Encoding: #{format_info.encoding}
- Format:
  - word_dic: #{format_info.word_dic}
  - unk_dic: #{format_info.unk_dic}
  - features: #{format_info.features}
  - char_types: #{format_info.char_types}
  - matrix: #{format_info.matrix}
    EOS
    next if dry
    format_info.compile_dict(dict_dir,bin_dir)
  },
  :help => lambda {|args|
	puts <<-EOS
USAGE: okura command args
command:
  console dict_dir
  help
  compile
	EOS
  }
}

class IllegalOption < StandardError
  def initialize msg
	@message=msg
  end
  attr_reader :message
end

if $*.empty?
  commands[:help].call []
else
  command=$*.first.to_sym
  unless commands.has_key? command
	commands[:help].call []
	exit 1
  end
  begin
	commands[command].call $*[1..-1]
  rescue IllegalOption
	$stderr.puts $!.message
	exit 1
  end
end


